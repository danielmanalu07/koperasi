import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:go_router/go_router.dart';
import 'package:intl/intl.dart';
import 'package:koperasi/core/constants/color_constant.dart';
import 'package:koperasi/features/sewa_menyewa/domain/entities/asset.dart'; // Import Asset entity
import 'package:koperasi/features/sewa_menyewa/domain/entities/transaction.dart';
import 'package:koperasi/features/sewa_menyewa/presentation/bloc/Asset/asset_bloc.dart'; // Import AssetBloc
import 'package:koperasi/features/sewa_menyewa/presentation/bloc/Asset/asset_state.dart'; // Import AssetState
import 'package:koperasi/features/sewa_menyewa/presentation/bloc/Transaction/transaction_bloc.dart';
import 'package:koperasi/features/sewa_menyewa/presentation/bloc/Transaction/transaction_event.dart';
import 'package:koperasi/features/sewa_menyewa/presentation/bloc/Transaction/transaction_state.dart';

class AddTransactionFormModal extends StatefulWidget {
  const AddTransactionFormModal({super.key});

  @override
  State<AddTransactionFormModal> createState() =>
      _AddTransactionFormModalState();
}

class _AddTransactionFormModalState extends State<AddTransactionFormModal> {
  final _formKey = GlobalKey<FormState>();
  final TextEditingController _customerNameController = TextEditingController();
  final TextEditingController _descriptionController = TextEditingController();
  DateTime? _selectedDate;
  Asset? _selectedAsset; // To store the selected Asset object
  String? _selectedStatus; // Added for transaction status

  final dateFormat = DateFormat('dd MMMM yyyy', 'id_ID');

  bool _isLoadingDialogShowing = false;

  @override
  void initState() {
    super.initState();
    // No need to load assets here, AssetBloc should already be loaded by AssetPage
    // We just need to listen to its state
    _selectedStatus = 'Aktif'; // Default status
  }

  @override
  void dispose() {
    _customerNameController.dispose();
    _descriptionController.dispose();
    super.dispose();
  }

  void _showLoadingDialog() {
    if (!_isLoadingDialogShowing) {
      _isLoadingDialogShowing = true;
      showDialog(
        context: context,
        barrierDismissible: false,
        builder: (context) => const Center(child: CircularProgressIndicator()),
      ).then((_) {
        _isLoadingDialogShowing = false;
      });
    }
  }

  void _dismissLoadingDialog() {
    if (_isLoadingDialogShowing && Navigator.of(context).canPop()) {
      Navigator.of(context).pop();
      _isLoadingDialogShowing = false;
    }
  }

  Future<void> _selectDate(BuildContext context) async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: _selectedDate ?? DateTime.now(),
      firstDate: DateTime(2000),
      lastDate: DateTime(2101),
      builder: (context, child) {
        return Theme(
          data: Theme.of(context).copyWith(
            colorScheme: ColorScheme.light(
              primary: ColorConstant.blueColor,
              onPrimary: Colors.white,
              onSurface: Colors.black,
            ),
            textButtonTheme: TextButtonThemeData(
              style: TextButton.styleFrom(
                foregroundColor: ColorConstant.blueColor,
              ),
            ),
          ),
          child: child!,
        );
      },
    );
    if (picked != null && picked != _selectedDate) {
      setState(() {
        _selectedDate = picked;
      });
    }
  }

  void _submitForm() {
    if (_formKey.currentState!.validate()) {
      if (_selectedAsset == null) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Silakan pilih aset terlebih dahulu!')),
        );
        return;
      }
      if (_selectedStatus == null) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Silakan pilih status transaksi!')),
        );
        return;
      }

      final newTransaction = Transaction(
        id: 0, // ID will be generated by backend, 0 as placeholder
        customerName: _customerNameController.text,
        assetName: _selectedAsset!.name, // Use the name of the selected asset
        description: _descriptionController.text,
        date: _selectedDate!,
        status: _selectedStatus!, // Assign selected status
      );

      context.read<TransactionBloc>().add(AddTransactionEvent(newTransaction));
    }
  }

  @override
  Widget build(BuildContext context) {
    return MultiBlocListener(
      // Use MultiBlocListener to listen to both AssetBloc and TransactionBloc
      listeners: [
        BlocListener<TransactionBloc, TransactionState>(
          listener: (context, state) {
            if (state is TransactionCreated) {
              _dismissLoadingDialog();
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(
                  content: Text('Transaksi berhasil ditambahkan!'),
                ),
              );
              Navigator.pop(context); // Close the modal
              // It's good practice to ensure the list is refreshed after adding
              context.read<TransactionBloc>().add(LoadTransactionEvent());
            } else if (state is TransactionCreateError) {
              _dismissLoadingDialog();
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content: Text(
                    'Gagal menambahkan transaksi: ${state.message}',
                  ),
                ),
              );
            } else if (state is TransactionCreating) {
              _showLoadingDialog();
            }
          },
        ),
        // Listen to AssetBloc to get the list of assets
        BlocListener<AssetBloc, AssetState>(
          listener: (context, state) {
            if (state is AssetLoaded) {
              // Optional: if _selectedAsset is not null and not in the new list, set to null
              if (_selectedAsset != null &&
                  !state.asset.any((a) => a.id == _selectedAsset!.id)) {
                setState(() {
                  _selectedAsset = null;
                });
              }
            }
          },
        ),
      ],
      child: Container(
        decoration: const BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.vertical(top: Radius.circular(25)),
        ),
        padding: EdgeInsets.only(
          left: 20,
          right: 20,
          bottom: MediaQuery.of(context).viewInsets.bottom,
          top: 20,
        ),
        child: Form(
          key: _formKey,
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Align(
                alignment: Alignment.center,
                child: Container(
                  width: 40,
                  height: 4,
                  decoration: BoxDecoration(
                    color: Colors.grey[300],
                    borderRadius: BorderRadius.circular(2),
                  ),
                  margin: const EdgeInsets.only(bottom: 16),
                ),
              ),
              Text(
                'Tambah Transaksi Baru',
                style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                  fontWeight: FontWeight.bold,
                  color: Colors.black87,
                ),
              ),
              const SizedBox(height: 20),
              TextFormField(
                controller: _customerNameController,
                decoration: InputDecoration(
                  labelText: 'Nama Pelanggan',
                  hintText: 'Masukkan nama pelanggan',
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(12),
                    borderSide: BorderSide(color: ColorConstant.blueColor),
                  ),
                  enabledBorder: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(12),
                    borderSide: BorderSide(color: Colors.grey.shade400),
                  ),
                  focusedBorder: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(12),
                    borderSide: BorderSide(
                      color: ColorConstant.blueColor,
                      width: 2,
                    ),
                  ),
                  prefixIcon: const Icon(Icons.person, color: Colors.grey),
                  filled: true,
                  fillColor: Colors.grey[50],
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Nama pelanggan tidak boleh kosong';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 16),

              BlocBuilder<AssetBloc, AssetState>(
                builder: (context, state) {
                  if (state is AssetLoading) {
                    return const Center(
                      child: Padding(
                        padding: EdgeInsets.symmetric(vertical: 20.0),
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            SizedBox(
                              width: 20,
                              height: 20,
                              child: CircularProgressIndicator(strokeWidth: 2),
                            ),
                            SizedBox(width: 10),
                            Text('Memuat daftar aset...'),
                          ],
                        ),
                      ),
                    );
                  } else if (state is AssetLoaded) {
                    final List<Asset> availableAssets = state.asset
                        .where((a) => a.status == 'Aktif')
                        .toList(); // Only show active assets

                    if (availableAssets.isEmpty) {
                      return Padding(
                        padding: const EdgeInsets.symmetric(vertical: 20.0),
                        child: Text(
                          'Tidak ada aset aktif tersedia.',
                          style: TextStyle(color: Colors.grey[600]),
                        ),
                      );
                    }

                    return DropdownButtonFormField<Asset>(
                      value: _selectedAsset,
                      decoration: InputDecoration(
                        labelText: 'Nama Aset',
                        hintText: 'Pilih aset yang disewa',
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(12),
                          borderSide: BorderSide(
                            color: ColorConstant.blueColor,
                          ),
                        ),
                        enabledBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(12),
                          borderSide: BorderSide(color: Colors.grey.shade400),
                        ),
                        focusedBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(12),
                          borderSide: BorderSide(
                            color: ColorConstant.blueColor,
                            width: 2,
                          ),
                        ),
                        prefixIcon: const Icon(
                          Icons.inventory,
                          color: Colors.grey,
                        ),
                        filled: true,
                        fillColor: Colors.grey[50],
                      ),
                      isExpanded: true,
                      items: availableAssets.map((asset) {
                        return DropdownMenuItem<Asset>(
                          value: asset,
                          child: Text(asset.name),
                        );
                      }).toList(),
                      onChanged: (Asset? newValue) {
                        setState(() {
                          _selectedAsset = newValue;
                        });
                      },
                      validator: (value) {
                        if (value == null) {
                          return 'Aset tidak boleh kosong';
                        }
                        return null;
                      },
                      icon: Icon(
                        Icons.arrow_drop_down,
                        color: ColorConstant.blueColor,
                      ),
                      dropdownColor: Colors.white,
                    );
                  } else if (state is AssetError) {
                    return Padding(
                      padding: const EdgeInsets.symmetric(vertical: 20.0),
                      child: Text(
                        'Gagal memuat aset: ${state.message}',
                        style: TextStyle(color: Colors.red[600]),
                      ),
                    );
                  }
                  return const SizedBox(); // Fallback
                },
              ),
              const SizedBox(height: 16),

              // Added Status Dropdown
              DropdownButtonFormField<String>(
                value: _selectedStatus,
                decoration: InputDecoration(
                  labelText: 'Status Transaksi',
                  hintText: 'Pilih status transaksi',
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(12),
                    borderSide: BorderSide(color: ColorConstant.blueColor),
                  ),
                  enabledBorder: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(12),
                    borderSide: BorderSide(color: Colors.grey.shade400),
                  ),
                  focusedBorder: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(12),
                    borderSide: BorderSide(
                      color: ColorConstant.blueColor,
                      width: 2,
                    ),
                  ),
                  prefixIcon: const Icon(
                    Icons.check_circle_outline,
                    color: Colors.grey,
                  ),
                  filled: true,
                  fillColor: Colors.grey[50],
                ),
                isExpanded: true,
                items: <String>['Aktif', 'Selesai']
                    .map<DropdownMenuItem<String>>((String value) {
                      return DropdownMenuItem<String>(
                        value: value,
                        child: Text(value),
                      );
                    })
                    .toList(),
                onChanged: (String? newValue) {
                  setState(() {
                    _selectedStatus = newValue;
                  });
                },
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Status tidak boleh kosong';
                  }
                  return null;
                },
                icon: Icon(
                  Icons.arrow_drop_down,
                  color: ColorConstant.blueColor,
                ),
                dropdownColor: Colors.white,
              ),
              const SizedBox(height: 16),

              GestureDetector(
                onTap: () => _selectDate(context),
                child: AbsorbPointer(
                  child: TextFormField(
                    controller: TextEditingController(
                      text: _selectedDate == null
                          ? ''
                          : dateFormat.format(_selectedDate!),
                    ),
                    decoration: InputDecoration(
                      labelText: 'Tanggal Transaksi',
                      hintText: 'Pilih tanggal transaksi',
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12),
                        borderSide: BorderSide(color: ColorConstant.blueColor),
                      ),
                      enabledBorder: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12),
                        borderSide: BorderSide(color: Colors.grey.shade400),
                      ),
                      focusedBorder: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12),
                        borderSide: BorderSide(
                          color: ColorConstant.blueColor,
                          width: 2,
                        ),
                      ),
                      prefixIcon: const Icon(
                        Icons.calendar_today,
                        color: Colors.grey,
                      ),
                      filled: true,
                      fillColor: Colors.grey[50],
                    ),
                    validator: (value) {
                      if (_selectedDate == null) {
                        return 'Tanggal transaksi tidak boleh kosong';
                      }
                      return null;
                    },
                  ),
                ),
              ),
              const SizedBox(height: 16),
              TextFormField(
                controller: _descriptionController,
                maxLines: 3,
                decoration: InputDecoration(
                  labelText: 'Keterangan',
                  hintText:
                      'Deskripsi singkat transaksi (misal: "Untuk digunakan syuting film")',
                  alignLabelWithHint: true,
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(12),
                    borderSide: BorderSide(color: ColorConstant.blueColor),
                  ),
                  enabledBorder: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(12),
                    borderSide: BorderSide(color: Colors.grey.shade400),
                  ),
                  focusedBorder: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(12),
                    borderSide: BorderSide(
                      color: ColorConstant.blueColor,
                      width: 2,
                    ),
                  ),
                  prefixIcon: const Icon(Icons.description, color: Colors.grey),
                  filled: true,
                  fillColor: Colors.grey[50],
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Keterangan tidak boleh kosong';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 24),
              SizedBox(
                width: double.infinity,
                child: ElevatedButton.icon(
                  onPressed: _submitForm,
                  style: ElevatedButton.styleFrom(
                    backgroundColor: ColorConstant.blueColor,
                    padding: const EdgeInsets.symmetric(vertical: 12),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                  ),
                  icon: const Icon(Icons.add_task, color: Colors.white),
                  label: const Text(
                    'Tambah Transaksi',
                    style: TextStyle(fontSize: 18, color: Colors.white),
                  ),
                ),
              ),
              const SizedBox(height: 16),
            ],
          ),
        ),
      ),
    );
  }
}
